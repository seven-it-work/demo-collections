/*
 * Copyright (c) Huawei Technologies Co., Lq. 2023-2023. All rights reserved
 */

package com.seven.algorithm.leetcode;

import java.util.ArrayList;
import java.util.HashSet;

/**
 * TODO 描述
 * <p>
 *     分析：
 * 100, 101, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
 * 121, 122,
 * 131, 133,
 * 141, 144,
 * 151, 155,
 * 161, 166,
 * 171, 177,
 * 181, 188,
 * 191, 199
 * ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 * 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
 * 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
 * 1020, 1021, 1022,
 * 1030, 1031, 1033,
 * 1040, 1041, 1044,
 * 1050, 1051, 1055,
 * 1060, 1061, 1066,
 * 1070, 1071, 1077,
 * 1080, 1081, 1088,
 * 1090, 1091, 1099,
 * -----------------------------------------------------------
 * 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
 * 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
 * 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
 * 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
 * 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
 * 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
 * 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
 * 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
 * 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
 * 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
 * -----------------------------------------------------------
 * 1200, 1201, 1202,
 * 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
 * 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
 * 1231, 1232, 1233,
 * 1241, 1242, 1244,
 * 1251, 1252, 1255,
 * 1261, 1262, 1266,
 * 1271, 1272, 1277,
 * 1281, 1282, 1288,
 * 1291, 1292, 1299,
 * -----------------------------------------------------------
 * 1300, 1301, 1303,
 * 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
 * 1321, 1322, 1323,
 * 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
 * 1341, 1343, 1344,
 * 1351, 1353, 1355,
 * 1361, 1363, 1366,
 * 1371, 1373, 1377,
 * 1381, 1383, 1388,
 * 1391, 1393, 1399,
 * -----------------------------------------------------------
 * 1400, 1401, 1404,
 * 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
 * 1421, 1422, 1424,
 * 1431, 1433, 1434,
 * 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
 * 1451, 1454, 1455,
 * 1461, 1464, 1466,
 * 1471, 1474, 1477,
 * 1481, 1484, 1488,
 * 1491, 1494, 1499,
 * -----------------------------------------------------------
 * 1500, 1501, 1505,
 * 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
 * 1521, 1522, 1525,
 * 1531, 1533, 1535,
 * 1541, 1544, 1545,
 * 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
 * 1561, 1565, 1566,
 * 1571, 1575, 1577,
 * 1581, 1585, 1588,
 * 1591, 1595, 1599,
 * -----------------------------------------------------------
 * 1600, 1601, 1606,
 * 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
 * 1621, 1622, 1626, 1631, 1633, 1636, 1641, 1644, 1646, 1651, 1655, 1656, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1671, 1676, 1677, 1681, 1686, 1688, 1691, 1696, 1699, 1700, 1701, 1707, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1721, 1722, 1727, 1731, 1733, 1737, 1741, 1744, 1747, 1751, 1755, 1757, 1761, 1766, 1767, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1781, 1787, 1788, 1791, 1797, 1799, 1800, 1801, 1808, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1821, 1822, 1828, 1831, 1833, 1838, 1841, 1844, 1848, 1851, 1855, 1858, 1861, 1866, 1868, 1871, 1877, 1878, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1891, 1898, 1899, 1900, 1901, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1921, 1922, 1929, 1931, 1933, 1939, 1941, 1944, 1949, 1951, 1955, 1959, 1961, 1966, 1969, 1971, 1977, 1979, 1981, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000
 * <p>
 * <p>
 * [100,999]:共252个
 * [100,199]:共28个
 * (10 * 1 + 9 * 2) * 1 = 28
 * (10 * 1 + 9 * 2) * 9 = 252
 * [1000,9999]:
 * [1000,1999]:共：496个
 * (10 * 2 + 8 * 3) * 9 + 10 * 10 = 496
 * [(10 * 2 + 8 * 3) * 9 + 10 * 10] * 9 = 4464
 * </P>
 * 结论：
 * 2位：定一位，一位一种可能（1）
 * 3位：定一位，一位1种可能，一位2种可能（10+(10-1)+(10-1)）
 * 4位：定一位，一位1种可能，一位2种可能，一位3种可能
 *
 * </P>
 * <p>
 * 反向分析：1000以上没有重复的
 * 1023,1024,1025....1029
 * 1032,1034,1035....1039
 * 结论：
 * 1、2位,定一位，另一位有9种可能
 * 2、3位,定一位，一位8中可能，一位7中可能
 * </P>
 *
 * @date 2023/3/20 9:03
 */
public class Solution1012 {
    public static int numDupDigitsAtMostN(int n) {
        return numDupDigitsAtMostN1(n);
    }

    /**
     * 公式法
     * 1位：0
     * 2位：1 * 9 = 9
     * 3位：(10 * 1 + 9 * 2)                                  * 9
     * 4位：[(10 * 2 + 8 * 3) * 9 + 10 * 10]                  * 9
     * 5位：[(10 * 3 + 7 * 4) * 8 + 10 * 20] * 9 + 10 * 10 * 10
     * 2023-3-20 10:26:41
     * @param n
     * @return
     */
    private static int numDupDigitsAtMostN2(int n) {
        return 0;
    }

    /**
     * 暴力
     * 2023-3-20 09:14:46
     * <P>超时</P>
     *
     * @param n
     * @return
     */
    private static int numDupDigitsAtMostN1(int n) {
        int count = 0;
        ArrayList<Integer> tempShow = new ArrayList<>();
        for (int i = 10000; i <= 19999; i++) {
            if (extracted1(i)) {
                tempShow.add(i);
                count++;
            }
        }
        System.out.println(tempShow);
        return count;
    }

    private static boolean extracted1(int n) {
        String strN = n + "";
        HashSet<Character> characters = new HashSet<>();
        for (char c : strN.toCharArray()) {
            if (characters.contains(c)) {
                return true;
            } else {
                characters.add(c);
            }
        }
        return false;
    }
}
